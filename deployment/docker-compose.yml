version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: exoai_postgres
    environment:
      POSTGRES_DB: exoai_hunter
      POSTGRES_USER: exoai_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_here}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U exoai_user -d exoai_hunter"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - exoai_network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: exoai_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - exoai_network

  # FastAPI Backend
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: exoai_backend
    environment:
      DATABASE_URL: postgresql://exoai_user:${POSTGRES_PASSWORD:-secure_password_here}@postgres:5432/exoai_hunter
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      ENVIRONMENT: production
      LOG_LEVEL: info
      MODEL_PATH: /app/models
      DATA_PATH: /app/data
    volumes:
      - ../models:/app/models:ro
      - ../data:/app/data:ro
      - backend_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - exoai_network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # React Frontend
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE_URL: http://localhost:8000/api
        REACT_APP_VERSION: 1.0.0
    container_name: exoai_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - exoai_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: exoai_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - exoai_network

  # ML Model Training Service (optional)
  trainer:
    build:
      context: ../ml_pipeline
      dockerfile: Dockerfile
    container_name: exoai_trainer
    environment:
      DATABASE_URL: postgresql://exoai_user:${POSTGRES_PASSWORD:-secure_password_here}@postgres:5432/exoai_hunter
      MODEL_OUTPUT_PATH: /app/models
      DATA_PATH: /app/data
    volumes:
      - ../models:/app/models
      - ../data:/app/data
      - training_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - training
    networks:
      - exoai_network
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: exoai_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring
    networks:
      - exoai_network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: exoai_grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin_password}
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    profiles:
      - monitoring
    networks:
      - exoai_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  training_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  exoai_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
